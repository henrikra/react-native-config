def getCurrentFlavorLowerCased() {
    // match optional modules followed by the task
    // (?:.*:)* is a non-capturing group to skip any :foo:bar: if they exist
    // *[a-z]+([A-Za-z]+) will capture the flavor part of the task name onward (e.g., assembleRelease --> Release)
    def pattern = /(?:.*:)*[a-z]+([A-Z][A-Za-z]+)/
    def flavor = ""

    gradle.getStartParameter().getTaskNames().any { name ->
        def matcher = name =~ pattern
        if (matcher.find()) {
            flavor = matcher.group(1).toLowerCase()
            return true
        }
    }

    return flavor
}

def getEnvFilename(flavor) {
    if (System.env['ENVFILE'] || System.getProperty('ENVFILE')) {
        return System.env['ENVFILE'] ?: System.getProperty('ENVFILE')
    } else if (project.hasProperty("defaultEnvFile")) {
        return project.defaultEnvFile
    } else if (project.hasProperty("envConfigFiles")) {
        // use startsWith because sometimes the task is "generateDebugSources", so we want to match "debug"
        def possibleConfig = project.ext.envConfigFiles.find{pair -> 
            flavor.startsWith(pair.key.toLowerCase())
        }
        return possibleConfig?.value ?: ".env"
    } else {
        return ".env";
    }
}

def loadDotEnv(flavor = getCurrentFlavorLowerCased()) {
    def envFilename = getEnvFilename(flavor)

    def env = [:]
    println("Reading env from: $envFilename")

    File f = new File("$project.rootDir/../$envFilename");
    if (!f.exists()) {
        f = new File("$envFilename");
    }

    if (f.exists()) {
        f.eachLine { line ->
            def matcher = (line =~ /^\s*(?:export\s+|)([\w\d\.\-_]+)\s*=\s*['"]?(.*?)?['"]?\s*$/)
            if (matcher.getCount() == 1 && matcher[0].size() == 3) {
                env.put(matcher[0][1], matcher[0][2].replace('"', '\\"'))
            }
        }
    } else {
        println("**************************")
        println("*** Missing .env file ****")
        println("**************************")
    }

    project.ext.set("env", env)
}

loadDotEnv()

android {
    defaultConfig {
        project.env.each { k, v ->
            def escaped = v.replaceAll("%","\\\\u0025")
            buildConfigField "String", k, "\"$v\""
            resValue "string", k, "\"$escaped\""
        }
    }
}

tasks.whenTaskAdded { task ->
    if (project.hasProperty("envConfigFiles")) {
        project.envConfigFiles.each { envConfigName, envConfigFile ->
            if (task.name.toLowerCase() == "generate"+envConfigName+"buildconfig") {
                task.doFirst() {
                    android.applicationVariants.all { variant ->
                        def variantConfigString = variant.getVariantData().getVariantConfiguration().getFullName()
                        if (envConfigName.contains(variantConfigString.toLowerCase())) {
                            loadDotEnv(envConfigName)
                            project.env.each { k, v ->
                                def escaped = v.replaceAll("%","\\\\u0025")
                                variant.buildConfigField "String", k, "\"$v\""
                                variant.resValue "string", k, "\"$escaped\""
                            }
                        }
                    }
                }
            }
        }
    }
}

